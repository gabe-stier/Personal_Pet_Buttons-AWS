AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: |
  dogbutton-backend
  Sample SAM Template for dogbutton-backend
Globals:
  Function:
    Timeout: 3
Resources:
  ButtonsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
  ButtonsFunctionGET:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/buttons.ButtonsGet
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        DogButtonAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ButtonsAPI
            Path: /buttons
            Method: get
    DependsOn:
      - ErrorLogStream
      - ButtonLogStream
  ButtonsFunctionPOST:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/buttons.ButtonsPost
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        DogButtonAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ButtonsAPI
            Path: /buttons/{action}
            Method: post
            RequestParameters:
              - method.request.path.action:
                  Required: true
    DependsOn:
      - ErrorLogStream
      - ButtonLogStream
  ButtonsFunctionDELETE:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/buttons.ButtonsDelete
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        DogButtonAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ButtonsAPI
            Path: /buttons/{action}
            Method: delete
            RequestParameters:
              - method.request.path.action:
                  Required: true
    DependsOn:
      - ErrorLogStream
      - ButtonLogStream
  SettingsFunctionGET:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/settings.SettingsGet
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        DogButtonAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ButtonsAPI
            Path: /settings
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ConfigBucket}
                - !Sub arn:${AWS::Partition}:s3:::${ConfigBucket}/*
      Environment:
        Variables:
          CONFIGBUCKET_BUCKET_NAME: !Ref ConfigBucket
          CONFIGBUCKET_BUCKET_ARN: !GetAtt ConfigBucket.Arn
    DependsOn:
      - ErrorLogStream
      - ButtonLogStream
  SettingsFunctionPUT:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/settings.SettingsPut
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        DogButtonAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ButtonsAPI
            Path: /settings
            Method: PUT
            RequestParameters:
              - method.request.path.action:
                  Required: true
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ConfigBucket}
                - !Sub arn:${AWS::Partition}:s3:::${ConfigBucket}/*
      Environment:
        Variables:
          CONFIGBUCKET_BUCKET_NAME: !Ref ConfigBucket
          CONFIGBUCKET_BUCKET_ARN: !GetAtt ConfigBucket.Arn
    DependsOn:
      - ErrorLogStream
      - ButtonLogStream
  PingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/ping.PingGet
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        DogButtonAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ButtonsAPI
            Path: /ping
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ConfigBucket}
                - !Sub arn:${AWS::Partition}:s3:::${ConfigBucket}/*
      Environment:
        Variables:
          CONFIGBUCKET_BUCKET_NAME: !Ref ConfigBucket
          CONFIGBUCKET_BUCKET_ARN: !GetAtt ConfigBucket.Arn
    DependsOn:
      - ErrorLogStream
      - ButtonLogStream
  SettingsFileInit:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const aws = require("aws-sdk");
          const response = require("cfn-response");
          const s3 = new aws.S3();
          settingsData = {
            globalQuietTime: {
              quietStart: "",
              quietStop: "",
            },
            sendNotifications: true,
            quietUsers: [],
          };
          buttonsData = {
            potty: {
              disabled: false,
              subscriptedUsers: ["*"],
              uuid: aws.util.uuid.v4(),
            },
            outside: {
              disabled: false,
              subscriptedUsers: ["*"],
              uuid: aws.util.uuid.v4(),
            },
            outside: {
              disabled: false,
              subscriptedUsers: ["*"],
              uuid: aws.util.uuid.v4(),
            },
          };
          exports.handler = function (event, context) {
            console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
            if (event.RequestType == "Delete") {
              try {
                s3.deleteObject({
                  Bucket: event.ResourceProperties.ConfBucket,
                  Key: "settings.json",
                }).promise();
                response.send(event, context, "SUCCESS", {});
              } catch (err) {
                response.send(event, context, "FAILED", {});
              }
            } else if (event.RequestType == "Create") {
              try {
                s3_object = s3
                  .getObject({
                    Bucket: event.ResourceProperties.ConfBucket,
                    Key: "settings.json",
                  })
                  .promise();
                response.send(event, context, "SUCCESS", {});
              } catch (err) {
                try {
                  s3.putObject({
                    Body: JSON.stringify(settingsData),
                    Bucket: event.ResourceProperties.ConfBucket,
                    Key: "settings.json",
                    ContentType: "application/json",
                  }).promise();
                  s3.putObject({
                    Body: JSON.stringify(buttonsData),
                    Bucket: event.ResourceProperties.ConfBucket,
                    Key: "buttons.json",
                    ContentType: "application/json",
                  }).promise();
                  response.send(event, context, "SUCCESS", {});
                } catch (err) {
                  response.send(event, context, "FAILED", {});
                }
              }
            }
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
    DependsOn:
      - ErrorLogStream
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: s3AccessRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
  InitializeSettings:
    Type: Custom::Install
    Properties:
      ServiceToken: !GetAtt SettingsFileInit.Arn
      ConfBucket: !Ref ConfigBucket
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: CognitoUserPoolClientName
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref CognitoUserEmail
      UserPoolId: !Ref UserPool
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-configbuc-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ConfigBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: "2012-10-17"
        Statement:
          - Principal: "*"
            Action: "*"
            Effect: Deny
            Resource:
              - !GetAtt ConfigBucket.Arn
              - !Sub ${ConfigBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"
  PetButtonsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: PetButtons
  ButtonLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: PetButtons
      LogStreamName: ButtonLogs
    DependsOn:
      - PetButtonsLogGroup
  ErrorLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: PetButtons
      LogStreamName: ErrorLogs
    DependsOn:
      - PetButtonsLogGroup
Outputs:
  DogButtonAPIApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub https://${ButtonsAPI}.execute-api.${AWS::Region}.amazonaws.com/api/
  ButtonsFunctionGET:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt ButtonsFunctionGET.Arn
  ButtonsFunctionGETIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt ButtonsFunctionGETRole.Arn
  UserPoolID:
    Description: ID of the UserPool
    Value: !Ref UserPool
  CleintUserPoolID:
    Description: ID of the UserPoolClient
    Value: !Ref UserPoolClient
Parameters:
  CognitoUserEmail:
    Description: Email address of the created user
    Type: String
